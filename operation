第一部分:分支操作
1.新分支切换 git checkout -b 新分支名称

git checkout -b dev0.1

2.代码修改


3.新分支推送 git push --set-upstream origin 新分支名称（git  push -u origin 新分支名称）

git  push -u origin dev0.1

3.新分支合并：

(1).切换到要合并的分支上
git  checkout dev
(2)拉取dev代码,保持代码最新

git pull origin dev ( git pull)

(3)将新分支代码(dev0.1)合并到dev

git merge dev0.1

(4)查看状态并提交dev

git status

git log

git push origin dev （git push）


(5)从dev提测 checkout新分支

git checkout -b release0.1

git push origin release0.1

删除开发分支
删除远程分支dev0.1
git push origin --delete dev0.1

删除本地分支 dev0.1
git branch -d  dev0.1


第二部分:打tag

1.新建tag  git tag v1.0
2.将tag同步到某个分支远程服务器   git push origin v1.0



tag与branch的区别：

tag是灵活的机制，扩展了分支、提交的描述能力。Tag基于提交，是提交的别名，全局可见。不论此提交在哪个分支上，即tag可以跨不同分支而存在。

branch是（并行）分支，在分支上做提交，是相关提交的组。（切换分支默认是到此分支的HEAD节点；切换至提交能看到其所在的branch）
当一个提交需要全局标签时，使用Tag。如，补充GIT分支描述体系外的说明（区分于提交时的内部注释）——如，某个提交被GIT系统外所依赖，
此时不需要专门建个临时分支去表示提交的去向，而用Tag辅助分支说明即可。



https://www.jianshu.com/p/cdd80dd15593

https://www.jianshu.com/p/26d050497abb